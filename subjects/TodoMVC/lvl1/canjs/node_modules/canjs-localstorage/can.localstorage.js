// LACUNA LAZY LOAD FALLBACK
function lacuna_lazy_load(id, callback){
    fetch("http://127.0.0.1:8125/lazyload/", {
        method: "POST",
        headers: { "Accept": "application/json", "Content-Type": "application/json" },
        body: JSON.stringify({id})
    }).then(response => {
        return response.text();
    }).then(callback);
}
(function(define) {
  if (typeof define == "undefined") {
    define = function(deps, fn) {
      can.Model.LocalStorage = fn(can.Model);
    }
  }

  define(['can/model'], function(Model) {
    return Model.extend({
      // Implement local storage handling
      localStore: function(cb) {
        var name = this.name,
          data = JSON.parse(window.localStorage[name] || (window.localStorage[name] = '[]')),
          res = cb.call(this, data);
        if (res !== false) {
          can.each(data, function(todo) {lacuna_lazy_load("node_modules/canjs-localstorage/can.localstorage.js[522:568]", functionData => eval(functionData))});
          window.localStorage[name] = JSON.stringify(data);
        }
      },

      findAll: function(params) {
        var def = new can.Deferred();
        this.localStore(function(todos) {
          var instances = [],
            self = this;
          can.each(todos, function(todo) {lacuna_lazy_load("node_modules/canjs-localstorage/can.localstorage.js[861:918]", functionData => eval(functionData))});
          def.resolve({data: instances});
        });
        return def;
      },

      destroy: function(id) {lacuna_lazy_load("node_modules/canjs-localstorage/can.localstorage.js[1033:1351]", functionData => eval(functionData))},

      create: function(attrs) {lacuna_lazy_load("node_modules/canjs-localstorage/can.localstorage.js[1384:1642]", functionData => eval(functionData))},

      update: function(id, attrs) {lacuna_lazy_load("node_modules/canjs-localstorage/can.localstorage.js[1679:2033]", functionData => eval(functionData))}
    }, {});
  });
})(window.define);
