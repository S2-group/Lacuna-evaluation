{
    "node_modules/todomvc-common/base.js[197:548]": "\n\t\t\tif (!object) {\n\t\t\t\treturn object;\n\t\t\t}\n\t\t\tfor (var argsIndex = 1, argsLength = arguments.length; argsIndex < argsLength; argsIndex++) {\n\t\t\t\tvar iterable = arguments[argsIndex];\n\t\t\t\tif (iterable) {\n\t\t\t\t\tfor (var key in iterable) {\n\t\t\t\t\t\tif (object[key] == null) {\n\t\t\t\t\t\t\tobject[key] = iterable[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn object;\n\t\t",
    "node_modules/todomvc-common/base.js[1588:3332]": "\n\t\t\tvar render;\n\t\t\tsettings = _.defaults({}, settings, _.templateSettings);\n\n\t\t\t// Combine delimiters into one regular expression via alternation.\n\t\t\tvar matcher = new RegExp([\n\t\t\t\t(settings.escape || noMatch).source,\n\t\t\t\t(settings.interpolate || noMatch).source,\n\t\t\t\t(settings.evaluate || noMatch).source\n\t\t\t].join('|') + '|$', 'g');\n\n\t\t\t// Compile the template source, escaping string literals appropriately.\n\t\t\tvar index = 0;\n\t\t\tvar source = \"__p+='\";\n\t\t\ttext.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n\t\t\t\tsource += text.slice(index, offset)\n\t\t\t\t\t.replace(escaper, function(match) { return '\\\\' + escapes[match]; });\n\n\t\t\t\tif (escape) {\n\t\t\t\t\tsource += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n\t\t\t\t}\n\t\t\t\tif (interpolate) {\n\t\t\t\t\tsource += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n\t\t\t\t}\n\t\t\t\tif (evaluate) {\n\t\t\t\t\tsource += \"';\\n\" + evaluate + \"\\n__p+='\";\n\t\t\t\t}\n\t\t\t\tindex = offset + match.length;\n\t\t\t\treturn match;\n\t\t\t});\n\t\t\tsource += \"';\\n\";\n\n\t\t\t// If a variable is not specified, place data values in local scope.\n\t\t\tif (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n\t\t\tsource = \"var __t,__p='',__j=Array.prototype.join,\" +\n\t\t\t\t\"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n\t\t\t\tsource + \"return __p;\\n\";\n\n\t\t\ttry {\n\t\t\t\trender = new Function(settings.variable || 'obj', '_', source);\n\t\t\t} catch (e) {\n\t\t\t\te.source = source;\n\t\t\t\tthrow e;\n\t\t\t}\n\n\t\t\tif (data) return render(data, _);\n\t\t\tvar template = function(data) {\n\t\t\t\treturn render.call(this, data, _);\n\t\t\t};\n\n\t\t\t// Provide the compiled function source as a convenience for precompilation.\n\t\t\ttemplate.source = 'function(' + (settings.variable || 'obj') + '){\\n' + source + '}';\n\n\t\t\treturn template;\n\t\t",
    "node_modules/todomvc-common/base.js[3484:3613]": "var g=d.createElement(t),s=d.getElementsByTagName(t)[0];g.src='//www.google-analytics.com/ga.js';s.parentNode.insertBefore(g,s)",
    "node_modules/todomvc-common/base.js[4361:5286]": "\n\t\tif (!(this instanceof Learn)) {\n\t\t\treturn new Learn(learnJSON, config);\n\t\t}\n\n\t\tvar template, framework;\n\n\t\tif (typeof learnJSON !== 'object') {\n\t\t\ttry {\n\t\t\t\tlearnJSON = JSON.parse(learnJSON);\n\t\t\t} catch (e) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (config) {\n\t\t\ttemplate = config.template;\n\t\t\tframework = config.framework;\n\t\t}\n\n\t\tif (!template && learnJSON.templates) {\n\t\t\ttemplate = learnJSON.templates.todomvc;\n\t\t}\n\n\t\tif (!framework && document.querySelector('[data-framework]')) {\n\t\t\tframework = document.querySelector('[data-framework]').dataset.framework;\n\t\t}\n\n\t\tthis.template = template;\n\n\t\tif (learnJSON.backend) {\n\t\t\tthis.frameworkJSON = learnJSON.backend;\n\t\t\tthis.frameworkJSON.issueLabel = framework;\n\t\t\tthis.append({\n\t\t\t\tbackend: true\n\t\t\t});\n\t\t} else if (learnJSON[framework]) {\n\t\t\tthis.frameworkJSON = learnJSON[framework];\n\t\t\tthis.frameworkJSON.issueLabel = framework;\n\t\t\tthis.append();\n\t\t}\n\n\t\tthis.fetchIssueCount();\n\t",
    "node_modules/todomvc-common/base.js[5330:6369]": "\n\t\tvar aside = document.createElement('aside');\n\t\taside.innerHTML = _.template(this.template, this.frameworkJSON);\n\t\taside.className = 'learn';\n\n\t\tif (opts && opts.backend) {\n\t\t\t// Remove demo link\n\t\t\tvar sourceLinks = aside.querySelector('.source-links');\n\t\t\tvar heading = sourceLinks.firstElementChild;\n\t\t\tvar sourceLink = sourceLinks.lastElementChild;\n\t\t\t// Correct link path\n\t\t\tvar href = sourceLink.getAttribute('href');\n\t\t\tsourceLink.setAttribute('href', href.substr(href.lastIndexOf('http')));\n\t\t\tsourceLinks.innerHTML = heading.outerHTML + sourceLink.outerHTML;\n\t\t} else {\n\t\t\t// Localize demo links\n\t\t\tvar demoLinks = aside.querySelectorAll('.demo-link');\n\t\t\tArray.prototype.forEach.call(demoLinks, function (demoLink) {\n\t\t\t\tif (demoLink.getAttribute('href').substr(0, 4) !== 'http') {\n\t\t\t\t\tdemoLink.setAttribute('href', findRoot() + demoLink.getAttribute('href'));\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tdocument.body.className = (document.body.className + ' learn-bar').trim();\n\t\tdocument.body.insertAdjacentHTML('afterBegin', aside.outerHTML);\n\t",
    "node_modules/todomvc-common/base.js[6419:7038]": "\n\t\tvar issueLink = document.getElementById('issue-count-link');\n\t\tif (issueLink) {\n\t\t\tvar url = issueLink.href.replace('https://github.com', 'https://api.github.com/repos');\n\t\t\tvar xhr = new XMLHttpRequest();\n\t\t\txhr.open('GET', url, true);\n\t\t\txhr.onload = function (e) {\n\t\t\t\tvar parsedResponse = JSON.parse(e.target.responseText);\n\t\t\t\tif (parsedResponse instanceof Array) {\n\t\t\t\t\tvar count = parsedResponse.length\n\t\t\t\t\tif (count !== 0) {\n\t\t\t\t\t\tissueLink.innerHTML = 'This app has ' + count + ' open issues';\n\t\t\t\t\t\tdocument.getElementById('issue-count').style.display = 'inline';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\txhr.send();\n\t\t}\n\t",
    "node_modules/exoskeleton/exoskeleton.js[481:559]": "\n      root.Backbone = root.Exoskeleton = factory(root, exports, _, $);\n    ",
    "node_modules/exoskeleton/exoskeleton.js[1831:1935]": "\n    root.Backbone = previousBackbone;\n    root.Exoskeleton = previousExoskeleton;\n    return this;\n  ",
    "node_modules/exoskeleton/exoskeleton.js[3413:3489]": "\n    throw new Error('A \"url\" property or function must be specified');\n  ",
    "node_modules/exoskeleton/exoskeleton.js[3669:3774]": "\n      if (error) error(model, resp, options);\n      model.trigger('error', model, resp, options);\n    ",
    "node_modules/exoskeleton/exoskeleton.js[4658:4790]": "\n    return string == null ? '' : String(string).replace(/[&<>\"']/g, function(match) {\n      return htmlEscapes[match];\n    });\n  ",
    "node_modules/exoskeleton/exoskeleton.js[4840:5486]": "\n    var iterator = typeof value === 'function' ? value : function(obj){ return obj[value]; };\n    return obj\n      .map(function(value, index, list) {\n        return {\n          value: value,\n          index: index,\n          criteria: iterator.call(context, value, index, list)\n        };\n      })\n      .sort(function(left, right) {\n        var a = left.criteria;\n        var b = right.criteria;\n        if (a !== b) {\n          if (a > b || a === void 0) return 1;\n          if (a < b || b === void 0) return -1;\n        }\n        return left.index - right.index;\n      })\n      .map(function(item) {\n        return item.value;\n      });\n  ",
    "node_modules/exoskeleton/exoskeleton.js[5802:9551]": "\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a == 1 / b;\n    // A strict comparison is necessary because `null == undefined`.\n    if (a == null || b == null) return a === b;\n    // Unwrap any wrapped objects.\n    //if (a instanceof _) a = a._wrapped;\n    //if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className != toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, dates, and booleans are compared by value.\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return a == String(b);\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for\n        // other numeric values.\n        return a !== +a ? b !== +b : (a === 0 ? 1 / a === 1 / b : a === +b);\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a == +b;\n      // RegExps are compared by their source patterns and flags.\n      case '[object RegExp]':\n        return a.source == b.source &&\n               a.global == b.global &&\n               a.multiline == b.multiline &&\n               a.ignoreCase == b.ignoreCase;\n    }\n    if (typeof a != 'object' || typeof b != 'object') return false;\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] == a) return bStack[length] == b;\n    }\n    // Objects with different constructors are not equivalent, but `Object`s\n    // from different frames are.\n    var aCtor = a.constructor, bCtor = b.constructor;\n    if (aCtor !== bCtor && !(typeof aCtor === 'function' && (aCtor instanceof aCtor) &&\n                             typeof bCtor === 'function' && (bCtor instanceof bCtor))) {\n      return false;\n    }\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n    var size = 0, result = true;\n    // Recursively compare objects and arrays.\n    if (className === '[object Array]') {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      size = a.length;\n      result = size === b.length;\n      if (result) {\n        // Deep compare the contents, ignoring non-numeric properties.\n        while (size--) {\n          if (!(result = eq(a[size], b[size], aStack, bStack))) break;\n        }\n      }\n    } else {\n      // Deep compare objects.\n      for (var key in a) {\n        if (_.has(a, key)) {\n          // Count the expected number of properties.\n          size++;\n          // Deep compare each member.\n          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;\n        }\n      }\n      // Ensure that both objects contain the same number of properties.\n      if (result) {\n        for (key in b) {\n          if (_.has(b, key) && !(size--)) break;\n        }\n        result = !size;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return result;\n  ",
    "node_modules/exoskeleton/exoskeleton.js[9653:9687]": "\n    return eq(a, b, [], []);\n  ",
    "node_modules/exoskeleton/exoskeleton.js[10779:11120]": "\n    if (!eventsApi(this, 'once', name, [callback, context]) || !callback) return this;\n    var self = this;\n    var ran;\n    var once = function() {\n      if (ran) return;\n      ran = true;\n      self.off(name, once);\n      callback.apply(this, arguments);\n    };\n    once._callback = callback;\n    return this.on(name, once, context);\n  ",
    "node_modules/exoskeleton/exoskeleton.js[11401:12271]": "\n    var retain, ev, events, names, i, l, j, k;\n    if (!this._events || !eventsApi(this, 'off', name, [callback, context])) return this;\n    if (!name && !callback && !context) {\n      this._events = void 0;\n      return this;\n    }\n    names = name ? [name] : Object.keys(this._events);\n    for (i = 0, l = names.length; i < l; i++) {\n      name = names[i];\n      if (events = this._events[name]) {\n        this._events[name] = retain = [];\n        if (callback || context) {\n          for (j = 0, k = events.length; j < k; j++) {\n            ev = events[j];\n            if ((callback && callback !== ev.callback && callback !== ev.callback._callback) ||\n                (context && context !== ev.context)) {\n              retain.push(ev);\n            }\n          }\n        }\n        if (!retain.length) delete this._events[name];\n      }\n    }\n\n    return this;\n  ",
    "node_modules/exoskeleton/exoskeleton.js[13099:13542]": "\n    var listeningTo = this._listeningTo;\n    if (!listeningTo) return this;\n    var remove = !name && !callback;\n    if (!callback && typeof name === 'object') callback = this;\n    if (obj) (listeningTo = {})[obj._listenId] = obj;\n    for (var id in listeningTo) {\n      obj = listeningTo[id];\n      obj.off(name, callback, this);\n      if (remove || !Object.keys(obj._events).length) delete this._listeningTo[id];\n    }\n    return this;\n  ",
    "node_modules/exoskeleton/exoskeleton.js[16502:16933]": "\n  var attrs = attributes || {};\n  options || (options = {});\n  this.cid = _.uniqueId('c');\n  this.attributes = Object.create(null);\n  if (options.collection) this.collection = options.collection;\n  if (options.parse) attrs = this.parse(attrs, options) || {};\n  attrs = _.defaults({}, attrs, _.result(this, 'defaults'));\n  this.set(attrs, options);\n  this.changed = Object.create(null);\n  this.initialize.apply(this, arguments);\n",
    "node_modules/exoskeleton/exoskeleton.js[17474:17476]": "",
    "node_modules/exoskeleton/exoskeleton.js[17562:17609]": "\n    return _.extend({}, this.attributes);\n  ",
    "node_modules/exoskeleton/exoskeleton.js[17761:17815]": "\n    return Backbone.sync.apply(this, arguments);\n  ",
    "node_modules/exoskeleton/exoskeleton.js[17876:17915]": "\n    return this.attributes[attr];\n  ",
    "node_modules/exoskeleton/exoskeleton.js[17992:18034]": "\n    return _.escape(this.get(attr));\n  ",
    "node_modules/exoskeleton/exoskeleton.js[18149:18189]": "\n    return this.get(attr) != null;\n  ",
    "node_modules/exoskeleton/exoskeleton.js[18464:20449]": "\n    var attr, attrs, unset, changes, silent, changing, prev, current;\n    if (key == null) return this;\n\n    // Handle both `\"key\", value` and `{key: value}` -style arguments.\n    if (typeof key === 'object') {\n      attrs = key;\n      options = val;\n    } else {\n      (attrs = {})[key] = val;\n    }\n\n    options || (options = {});\n\n    // Run validation.\n    if (!this._validate(attrs, options)) return false;\n\n    // Extract attributes and options.\n    unset           = options.unset;\n    silent          = options.silent;\n    changes         = [];\n    changing        = this._changing;\n    this._changing  = true;\n\n    if (!changing) {\n      this._previousAttributes = _.extend(Object.create(null), this.attributes);\n      this.changed = {};\n    }\n    current = this.attributes, prev = this._previousAttributes;\n\n    // Check for changes of `id`.\n    if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];\n\n    // For each `set` attribute, update or delete the current value.\n    for (attr in attrs) {\n      val = attrs[attr];\n      if (!_.isEqual(current[attr], val)) changes.push(attr);\n      if (!_.isEqual(prev[attr], val)) {\n        this.changed[attr] = val;\n      } else {\n        delete this.changed[attr];\n      }\n      unset ? delete current[attr] : current[attr] = val;\n    }\n\n    // Trigger all relevant attribute changes.\n    if (!silent) {\n      if (changes.length) this._pending = options;\n      for (var i = 0, l = changes.length; i < l; i++) {\n        this.trigger('change:' + changes[i], this, current[changes[i]], options);\n      }\n    }\n\n    // You might be wondering why there's a `while` loop here. Changes can\n    // be recursively nested within `\"change\"` events.\n    if (changing) return this;\n    if (!silent) {\n      while (this._pending) {\n        options = this._pending;\n        this._pending = false;\n        this.trigger('change', this, options);\n      }\n    }\n    this._pending = false;\n    this._changing = false;\n    return this;\n  ",
    "node_modules/exoskeleton/exoskeleton.js[20600:20678]": "\n    return this.set(attr, void 0, _.extend({}, options, {unset: true}));\n  ",
    "node_modules/exoskeleton/exoskeleton.js[20767:20916]": "\n    var attrs = {};\n    for (var key in this.attributes) attrs[key] = void 0;\n    return this.set(attrs, _.extend({}, options, {unset: true}));\n  ",
    "node_modules/exoskeleton/exoskeleton.js[21101:21209]": "\n    if (attr == null) return !!Object.keys(this.changed).length;\n    return _.has(this.changed, attr);\n  ",
    "node_modules/exoskeleton/exoskeleton.js[21662:22031]": "\n    if (!diff) return this.hasChanged() ? _.extend(Object.create(null), this.changed) : false;\n    var val, changed = false;\n    var old = this._changing ? this._previousAttributes : this.attributes;\n    for (var attr in diff) {\n      if (_.isEqual(old[attr], (val = diff[attr]))) continue;\n      (changed || (changed = {}))[attr] = val;\n    }\n    return changed;\n  ",
    "node_modules/exoskeleton/exoskeleton.js[22169:22281]": "\n    if (attr == null || !this._previousAttributes) return null;\n    return this._previousAttributes[attr];\n  ",
    "node_modules/exoskeleton/exoskeleton.js[22412:22485]": "\n    return _.extend(Object.create(null), this._previousAttributes);\n  ",
    "node_modules/exoskeleton/exoskeleton.js[22700:23165]": "\n    options = options ? _.extend({}, options) : {};\n    if (options.parse === void 0) options.parse = true;\n    var model = this;\n    var success = options.success;\n    options.success = function(resp) {\n      if (!model.set(model.parse(resp, options), options)) return false;\n      if (success) success(model, resp, options);\n      model.trigger('sync', model, resp, options);\n    };\n    wrapError(this, options);\n    return this.sync('read', this, options);\n  ",
    "node_modules/exoskeleton/exoskeleton.js[23379:25277]": "\n    var attrs, method, xhr, attributes = this.attributes;\n\n    // Handle both `\"key\", value` and `{key: value}` -style arguments.\n    if (key == null || typeof key === 'object') {\n      attrs = key;\n      options = val;\n    } else {\n      (attrs = {})[key] = val;\n    }\n\n    options = _.extend({validate: true}, options);\n\n    // If we're not waiting and attributes exist, save acts as\n    // `set(attr).save(null, opts)` with validation. Otherwise, check if\n    // the model will be valid when the attributes, if any, are set.\n    if (attrs && !options.wait) {\n      if (!this.set(attrs, options)) return false;\n    } else {\n      if (!this._validate(attrs, options)) return false;\n    }\n\n    // Set temporary attributes if `{wait: true}`.\n    if (attrs && options.wait) {\n      this.attributes = _.extend(Object.create(null), attributes, attrs);\n    }\n\n    // After a successful server-side save, the client is (optionally)\n    // updated with the server-side state.\n    if (options.parse === void 0) options.parse = true;\n    var model = this;\n    var success = options.success;\n    options.success = function(resp) {\n      // Ensure attributes are restored during synchronous saves.\n      model.attributes = attributes;\n      var serverAttrs = model.parse(resp, options);\n      if (options.wait) serverAttrs = _.extend(attrs || {}, serverAttrs);\n      if (serverAttrs && typeof serverAttrs === 'object' && !model.set(serverAttrs, options)) {\n        return false;\n      }\n      if (success) success(model, resp, options);\n      model.trigger('sync', model, resp, options);\n    };\n    wrapError(this, options);\n\n    method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');\n    if (method === 'patch') options.attrs = attrs;\n    xhr = this.sync(method, this, options);\n\n    // Restore attributes.\n    if (attrs && options.wait) this.attributes = attributes;\n\n    return xhr;\n  ",
    "node_modules/exoskeleton/exoskeleton.js[25530:26176]": "\n    options = options ? _.extend({}, options) : {};\n    var model = this;\n    var success = options.success;\n\n    var destroy = function() {\n      model.trigger('destroy', model, model.collection, options);\n    };\n\n    options.success = function(resp) {\n      if (options.wait || model.isNew()) destroy();\n      if (success) success(model, resp, options);\n      if (!model.isNew()) model.trigger('sync', model, resp, options);\n    };\n\n    if (this.isNew()) {\n      options.success();\n      return false;\n    }\n    wrapError(this, options);\n\n    var xhr = this.sync('delete', this, options);\n    if (!options.wait) destroy();\n    return xhr;\n  ",
    "node_modules/exoskeleton/exoskeleton.js[26374:26598]": "\n    var base =\n      _.result(this, 'urlRoot') ||\n      _.result(this.collection, 'url') ||\n      urlError();\n    if (this.isNew()) return base;\n    return base.replace(/([^\\/])$/, '$1/') + encodeURIComponent(this.id);\n  ",
    "node_modules/exoskeleton/exoskeleton.js[26791:26813]": "\n    return resp;\n  ",
    "node_modules/exoskeleton/exoskeleton.js[26899:26954]": "\n    return new this.constructor(this.attributes);\n  ",
    "node_modules/exoskeleton/exoskeleton.js[27056:27101]": "\n    return !this.has(this.idAttribute);\n  ",
    "node_modules/exoskeleton/exoskeleton.js[27188:27269]": "\n    return this._validate({}, _.extend(options || {}, { validate: true }));\n  ",
    "node_modules/exoskeleton/exoskeleton.js[27457:27799]": "\n    if (!options.validate || !this.validate) return true;\n    attrs = _.extend(Object.create(null), this.attributes, attrs);\n    var error = this.validationError = this.validate(attrs, options) || null;\n    if (!error) return true;\n    this.trigger('invalid', this, error, _.extend(options, {validationError: error}));\n    return false;\n  ",
    "node_modules/exoskeleton/exoskeleton.js[28089:28260]": "\n    Model.prototype[method] = function() {\n      var args = slice.call(arguments);\n      args.unshift(this.attributes);\n      return _[method].apply(_, args);\n    };\n  ",
    "node_modules/exoskeleton/exoskeleton.js[29970:30046]": "\n    return this.map(function(model){ return model.toJSON(options); });\n  ",
    "node_modules/exoskeleton/exoskeleton.js[30420:31081]": "\n    var singular = !Array.isArray(models);\n    models = singular ? [models] : models.slice();\n    options || (options = {});\n    var i, l, index, model;\n    for (i = 0, l = models.length; i < l; i++) {\n      model = models[i] = this.get(models[i]);\n      if (!model) continue;\n      delete this._byId[model.id];\n      delete this._byId[model.cid];\n      index = this.indexOf(model);\n      this.models.splice(index, 1);\n      this.length--;\n      if (!options.silent) {\n        options.index = index;\n        model.trigger('remove', model, this, options);\n      }\n      this._removeReference(model, options);\n    }\n    return singular ? models[0] : models;\n  ",
    "node_modules/exoskeleton/exoskeleton.js[35512:35583]": "\n    return this.add(model, _.extend({at: this.length}, options));\n  ",
    "node_modules/exoskeleton/exoskeleton.js[35663:35761]": "\n    var model = this.at(this.length - 1);\n    this.remove(model, options);\n    return model;\n  ",
    "node_modules/exoskeleton/exoskeleton.js[35853:35914]": "\n    return this.add(model, _.extend({at: 0}, options));\n  ",
    "node_modules/exoskeleton/exoskeleton.js[36002:36086]": "\n    var model = this.at(0);\n    this.remove(model, options);\n    return model;\n  ",
    "node_modules/exoskeleton/exoskeleton.js[36167:36220]": "\n    return slice.apply(this.models, arguments);\n  ",
    "node_modules/exoskeleton/exoskeleton.js[36281:36395]": "\n    if (obj == null) return void 0;\n    return this._byId[obj] || this._byId[obj.id] || this._byId[obj.cid];\n  ",
    "node_modules/exoskeleton/exoskeleton.js[36459:36495]": "\n    return this.models[index];\n  ",
    "node_modules/exoskeleton/exoskeleton.js[36752:36874]": "\n      for (var key in attrs) {\n        if (attrs[key] !== model.get(key)) return false;\n      }\n      return true;\n    ",
    "node_modules/exoskeleton/exoskeleton.js[37006:37047]": "\n    return this.where(attrs, true);\n  ",
    "node_modules/exoskeleton/exoskeleton.js[37246:37701]": "\n    if (!this.comparator) throw new Error('Cannot sort a set without a comparator');\n    options || (options = {});\n\n    // Run sort based on type of `comparator`.\n    if (typeof this.comparator === 'string' || this.comparator.length === 1) {\n      this.models = this.sortBy(this.comparator, this);\n    } else {\n      this.models.sort(this.comparator.bind(this));\n    }\n\n    if (!options.silent) this.trigger('sort', this, options);\n    return this;\n  ",
    "node_modules/exoskeleton/exoskeleton.js[37787:37875]": "\n    return this.models.map(function(model) {\n      return model.get(attr);\n    });\n  ",
    "node_modules/exoskeleton/exoskeleton.js[38856:39301]": "\n    options = options ? _.extend({}, options) : {};\n    if (!(model = this._prepareModel(model, options))) return false;\n    if (!options.wait) this.add(model, options);\n    var collection = this;\n    var success = options.success;\n    options.success = function(model, resp) {\n      if (options.wait) collection.add(model, options);\n      if (success) success(model, resp, options);\n    };\n    model.save(null, options);\n    return model;\n  ",
    "node_modules/exoskeleton/exoskeleton.js[39605:39656]": "\n    return new this.constructor(this.models);\n  ",
    "node_modules/exoskeleton/exoskeleton.js[40012:40310]": "\n    if (attrs instanceof Model) return attrs;\n    options = _.extend({}, options);\n    options.collection = this;\n    var model = new this.model(attrs, options);\n    if (!model.validationError) return model;\n    this.trigger('invalid', this, model.validationError, options);\n    return false;\n  ",
    "node_modules/exoskeleton/exoskeleton.js[40418:40613]": "\n    this._byId[model.cid] = model;\n    if (model.id != null) this._byId[model.id] = model;\n    if (!model.collection) model.collection = this;\n    model.on('all', this._onModelEvent, this);\n  ",
    "node_modules/exoskeleton/exoskeleton.js[40723:40836]": "\n    if (this === model.collection) delete model.collection;\n    model.off('all', this._onModelEvent, this);\n  ",
    "node_modules/exoskeleton/exoskeleton.js[41161:41529]": "\n    if ((event === 'add' || event === 'remove') && collection !== this) return;\n    if (event === 'destroy') this.remove(model, options);\n    if (model && event === 'change:' + model.idAttribute) {\n      delete this._byId[model.previous(model.idAttribute)];\n      if (model.id != null) this._byId[model.id] = model;\n    }\n    this.trigger.apply(this, arguments);\n  ",
    "node_modules/exoskeleton/exoskeleton.js[42276:42448]": "\n    Collection.prototype[method] = function() {\n      var args = slice.call(arguments);\n      args.unshift(this.models);\n      return _[method].apply(_, args);\n    };\n  ",
    "node_modules/exoskeleton/exoskeleton.js[42684:42933]": "\n    Collection.prototype[method] = function(value, context) {\n      var iterator = typeof value === 'function' ? value : function(model) {\n        return model.get(value);\n      };\n      return _[method](this.models, iterator, context);\n    };\n  ",
    "node_modules/exoskeleton/exoskeleton.js[43282:43484]": "\n    var result;\n    this.some(function(value, index, list) {\n      if (iterator.call(context, value, index, list)) {\n        result = value;\n        return true;\n      }\n    });\n    return result;\n  ",
    "node_modules/exoskeleton/exoskeleton.js[43653:43835]": "\n      var iterator = typeof value === 'function' ? value : function(model) {\n        return model.get(value);\n      };\n      return _[method](this.models, iterator, context);\n    ",
    "node_modules/exoskeleton/exoskeleton.js[44695:44771]": "\n      if (viewOptions.indexOf(key) !== -1) this[key] = options[key];\n    ",
    "node_modules/exoskeleton/exoskeleton.js[45488:45533]": "\n      return this.$el.find(selector);\n    ",
    "node_modules/exoskeleton/exoskeleton.js[45668:45670]": "",
    "node_modules/exoskeleton/exoskeleton.js[45912:45938]": "\n      return this;\n    ",
    "node_modules/exoskeleton/exoskeleton.js[46088:46171]": "\n      this._removeElement();\n      this.stopListening();\n      return this;\n    ",
    "node_modules/exoskeleton/exoskeleton.js[46377:46409]": "\n      this.$el.remove();\n    ",
    "node_modules/exoskeleton/exoskeleton.js[47066:47314]": "\n      if (!Backbone.$) throw new Error('You must either include jQuery or override Backbone.View.prototype methods (Google Backbone.NativeView)');\n      this.$el = el instanceof Backbone.$ ? el : Backbone.$(el);\n      this.el = this.$el[0];\n    ",
    "node_modules/exoskeleton/exoskeleton.js[48531:48619]": "\n      this.$el.on(eventName + '.delegateEvents' + this.cid, selector, listener);\n    ",
    "node_modules/exoskeleton/exoskeleton.js[48869:48959]": "\n      if (this.$el) this.$el.off('.delegateEvents' + this.cid);\n      return this;\n    ",
    "node_modules/exoskeleton/exoskeleton.js[49151:49240]": "\n      this.$el.off(eventName + '.delegateEvents' + this.cid, selector, listener);\n    ",
    "node_modules/exoskeleton/exoskeleton.js[49413:49466]": "\n      return document.createElement(tagName);\n    ",
    "node_modules/exoskeleton/exoskeleton.js[50349:50389]": "\n      this.$el.attr(attributes);\n    ",
    "node_modules/exoskeleton/exoskeleton.js[50954:51864]": "\n    options || (options = {})\n\n    var type = methodMap[method];\n\n    // Default JSON-request options.\n    var params = {type: type, dataType: 'json'};\n\n    // Ensure that we have a URL.\n    if (!options.url) {\n      params.url = _.result(model, 'url') || urlError();\n    }\n\n    // Ensure that we have the appropriate request data.\n    if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {\n      params.contentType = 'application/json';\n      params.data = JSON.stringify(options.attrs || model.toJSON(options));\n    }\n\n    // Don't process data on a non-GET request.\n    if (params.type !== 'GET') {\n      params.processData = false;\n    }\n\n    // Make the request, allowing the user to override any Ajax options.\n    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));\n    model.trigger('request', model, xhr, options);\n    return xhr;\n  ",
    "node_modules/exoskeleton/exoskeleton.js[52248:52437]": "\n    if (!Backbone.$) throw new Error('You must either include jQuery or override Backbone.ajax (Google Backbone.NativeAjax)');\n    return Backbone.$.ajax.apply(Backbone.$, arguments);\n  ",
    "node_modules/exoskeleton/exoskeleton.js[54697:54775]": "\n      Backbone.history.navigate(fragment, options);\n      return this;\n    ",
    "node_modules/exoskeleton/exoskeleton.js[55590:55671]": "\n                     return optional ? match : '([^/?]+)';\n                   ",
    "node_modules/exoskeleton/exoskeleton.js[57573:57656]": "\n      return this.location.pathname.replace(/[^\\/]$/, '$&/') === this.root;\n    ",
    "node_modules/exoskeleton/exoskeleton.js[60625:60787]": "\n      window.removeEventListener('popstate', this.checkUrl);\n      window.removeEventListener('hashchange', this.checkUrl);\n      History.started = false;\n    ",
    "node_modules/exoskeleton/exoskeleton.js[61137:61257]": "\n      var current = this.getFragment();\n      if (current === this.fragment) return false;\n      this.loadUrl();\n    ",
    "node_modules/exoskeleton/exoskeleton.js[62192:63377]": "\n      if (!History.started) return false;\n      if (!options || options === true) options = {trigger: !!options};\n\n      var url = this.root + (fragment = this.getFragment(fragment || ''));\n\n      // Strip the hash for matching.\n      fragment = fragment.replace(pathStripper, '');\n\n      if (this.fragment === fragment) return;\n      this.fragment = fragment;\n\n      // Don't include a trailing slash on the root.\n      if (fragment === '' && url !== '/') url = url.slice(0, -1);\n\n      // If we're using pushState we use it to set the fragment as a real URL.\n      if (this._wantsPushState) {\n        this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);\n\n      // If hash changes haven't been explicitly disabled, update the hash\n      // fragment to store history.\n      } else if (this._wantsHashChange) {\n        this._updateHash(this.location, fragment, options.replace);\n      // If you've told us that you explicitly don't want fallback hashchange-\n      // based history, then `navigate` becomes a page refresh.\n      } else {\n        return this.location.assign(url);\n      }\n      if (options.trigger) return this.loadUrl(fragment);\n    ",
    "node_modules/exoskeleton/exoskeleton.js[63555:63830]": "\n      if (replace) {\n        var href = location.href.replace(/(javascript:|#).*$/, '');\n        location.replace(href + '#' + fragment);\n      } else {\n        // Some browsers require that `hash` contains a leading #.\n        location.hash = '#' + fragment;\n      }\n    ",
    "node_modules/microtemplates/index.js[1229:1372]": "\n    if (string == null) return '';\n    return ('' + string).replace(entityRe, function(match) {\n      return htmlEntities[match];\n    });\n  ",
    "node_modules/microtemplates/index.js[3224:3281]": "\n      return render.call(this, data, escapeExpr);\n    ",
    "node_modules/microtemplates/index.js[3591:3617]": "\n      return tmpl;\n    ",
    "node_modules/backbone.localstorage/backbone.localStorage.js[412:527]": "\n      // Use global variables if the locals are undefined.\n      return factory(Backbone || root.Backbone);\n    ",
    "node_modules/backbone.localstorage/backbone.localStorage.js[809:881]": "\n   return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n",
    "node_modules/backbone.localstorage/backbone.localStorage.js[963:1035]": "\n   return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n",
    "node_modules/backbone.localstorage/backbone.localStorage.js[1062:1097]": "\n  return item === Object(item);\n",
    "node_modules/backbone.localstorage/backbone.localStorage.js[1130:1223]": "\n  var i = array.length;\n  while (i--) if (array[i] === item) return true;\n  return false;\n",
    "node_modules/backbone.localstorage/backbone.localStorage.js[1973:2039]": "\n      return isObject(item) ? JSON.stringify(item) : item;\n    ",
    "node_modules/backbone.localstorage/backbone.localStorage.js[2154:2200]": "\n      return data && JSON.parse(data);\n    ",
    "node_modules/backbone.localstorage/backbone.localStorage.js[2442:2515]": "\n    this.localStorage().setItem(this.name, this.records.join(\",\"));\n  ",
    "node_modules/backbone.localstorage/backbone.localStorage.js[2650:2954]": "\n    if (!model.id && model.id !== 0) {\n      model.id = guid();\n      model.set(model.idAttribute, model.id);\n    }\n    this.localStorage().setItem(this._itemName(model.id), this.serializer.serialize(model));\n    this.records.push(model.id.toString());\n    this.save();\n    return this.find(model);\n  ",
    "node_modules/backbone.localstorage/backbone.localStorage.js[3041:3310]": "\n    this.localStorage().setItem(this._itemName(model.id), this.serializer.serialize(model));\n    var modelId = model.id.toString();\n    if (!contains(this.records, modelId)) {\n      this.records.push(modelId);\n      this.save();\n    }\n    return this.find(model);\n  ",
    "node_modules/backbone.localstorage/backbone.localStorage.js[3383:3483]": "\n    return this.serializer.deserialize(this.localStorage().getItem(this._itemName(model.id)));\n  ",
    "node_modules/backbone.localstorage/backbone.localStorage.js[3923:4210]": "\n    this.localStorage().removeItem(this._itemName(model.id));\n    var modelId = model.id.toString();\n    for (var i = 0, id; i < this.records.length; i++) {\n      if (this.records[i] === modelId) {\n        this.records.splice(i, 1);\n      }\n    }\n    this.save();\n    return model;\n  ",
    "node_modules/backbone.localstorage/backbone.localStorage.js[4343:4701]": "\n    var local = this.localStorage(),\n      itemRe = new RegExp(\"^\" + this.name + \"-\");\n\n    // Remove id-tracking item (e.g., \"foo\").\n    local.removeItem(this.name);\n\n    // Match all data items (e.g., \"foo-ID\") and remove.\n    for (var k in local) {\n      if (itemRe.test(k)) {\n        local.removeItem(k);\n      }\n    }\n\n    this.records.length = 0;\n  ",
    "node_modules/backbone.localstorage/backbone.localStorage.js[4758:4802]": "\n    return this.localStorage().length;\n  ",
    "node_modules/backbone.localstorage/backbone.localStorage.js[4831:4865]": "\n    return this.name+\"-\"+id;\n  ",
    "node_modules/backbone.nativeview/backbone.nativeview.js[924:986]": "\n    return this.attachEvent('on' + eventName, listener);\n  ",
    "node_modules/backbone.nativeview/backbone.nativeview.js[1088:1150]": "\n    return this.detachEvent('on' + eventName, listener);\n  ",
    "node_modules/backbone.nativeview/backbone.nativeview.js[1190:1297]": "\n    for (var i = 0, len = array.length; i < len; i++) if (array[i] === item) return i;\n    return -1;\n  ",
    "node_modules/backbone.nativeview/backbone.nativeview.js[1653:2067]": "\n        // Use querySelectorAll to find all elements matching the selector,\n        // then check if the given element is included in that list.\n        // Executing the query on the parentNode reduces the resulting nodeList,\n        // (document doesn't have a parentNode).\n        var nodeList = (this.parentNode || document).querySelectorAll(selector) || [];\n        return !!~indexOf(nodeList, this);\n      ",
    "node_modules/backbone.nativeview/backbone.nativeview.js[2595:2704]": "\n      this.undelegateEvents();\n      if (this.el.parentNode) this.el.parentNode.removeChild(this.el);\n    ",
    "node_modules/backbone.nativeview/backbone.nativeview.js[3382:3526]": "\n      for (var attr in attrs) {\n        attr in this.el ? this.el[attr] = attrs[attr] : this.el.setAttribute(attr, attrs[attr]);\n      }\n    ",
    "node_modules/backbone.nativeview/backbone.nativeview.js[4281:4536]": "\n        var node = e.target || e.srcElement;\n        for (; node && node != root; node = node.parentNode) {\n          if (matchesSelector.call(node, selector)) {\n            e.delegateTarget = node;\n            listener(e);\n          }\n        }\n      ",
    "node_modules/backbone.nativeview/backbone.nativeview.js[4956:5639]": "\n      if (typeof selector === 'function') {\n        listener = selector;\n        selector = null;\n      }\n\n      if (this.el) {\n        var handlers = this._domEvents.slice();\n        for (var i = 0, len = handlers.length; i < len; i++) {\n          var item = handlers[i];\n\n          var match = item.eventName === eventName &&\n              (listener ? item.listener === listener : true) &&\n              (selector ? item.selector === selector : true);\n\n          if (!match) continue;\n\n          elementRemoveEventListener.call(this.el, item.eventName, item.handler, false);\n          this._domEvents.splice(indexOf(handlers, item), 1);\n        }\n      }\n      return this;\n    ",
    "js/models/todo.js[459:524]": "\n\t\t\tthis.save({\n\t\t\t\tcompleted: !this.get('completed')\n\t\t\t});\n\t\t",
    "js/collections/todos.js[803:869]": "\n\t\t\treturn this.length > 0 ? this.at(this.length - 1) : null;\n\t\t",
    "js/collections/todos.js[1053:1116]": "\n\t\t\treturn this.length ? this.last().get('order') + 1 : 1;\n\t\t",
    "js/views/todo-view.js[968:1141]": "\n\t\t\tthis.listenTo(this.model, 'change', this.render);\n\t\t\tthis.listenTo(this.model, 'destroy', this.remove);\n\t\t\tthis.listenTo(this.model, 'visible', this.toggleVisible);\n\t\t",
    "js/views/todo-view.js[1210:1463]": "\n\t\t\tthis.el.innerHTML = this.template(this.model.toJSON());\n\t\t\tvar method = this.model.get('completed') ? 'add' : 'remove';\n\t\t\tthis.el.classList[method]('completed');\n\t\t\tthis.toggleVisible();\n\t\t\tthis.input = this.$('.edit').item(0);\n\t\t\treturn this;\n\t\t",
    "js/views/todo-view.js[1495:1568]": "\n\t\t\tthis.el.classList[this.isHidden() ? 'add' : 'remove']('hidden');\n\t\t",
    "js/views/todo-view.js[1595:1793]": "\n\t\t\tvar isCompleted = this.model.get('completed');\n\t\t\treturn (// hidden cases only\n\t\t\t\t(!isCompleted && app.TodoFilter === 'completed') ||\n\t\t\t\t(isCompleted && app.TodoFilter === 'active')\n\t\t\t);\n\t\t",
    "js/views/todo-view.js[1877:1906]": "\n\t\t\tthis.model.toggle();\n\t\t",
    "js/views/todo-view.js[2002:2149]": "\n\t\t\tthis.el.classList.add('editing');\n\t\t\tthis.input.focus();\n\t\t\t// Set the selection to the last char.\n\t\t\tthis.input.value = this.input.value;\n\t\t",
    "js/views/todo-view.js[2244:2490]": "\n\t\t\tvar value = discard ?\n\t\t\t\tthis.model.get('title') : this.input.value.trim();\n\t\t\tthis.input.value = value;\n\n\t\t\tif (value) {\n\t\t\t\tthis.model.save({ title: value });\n\t\t\t} else {\n\t\t\t\tthis.clear();\n\t\t\t}\n\n\t\t\tthis.el.classList.remove('editing');\n\t\t",
    "js/views/todo-view.js[2634:2762]": "\n\t\t\tif (e.which === ENTER_KEY) {\n\t\t\t\tthis.close();\n\t\t\t} else if (e.which === ESCAPE_KEY) {\n\t\t\t\tthis.close(null, true);\n\t\t\t}\n\t\t",
    "js/views/todo-view.js[2867:2897]": "\n\t\t\tthis.model.destroy();\n\t\t",
    "js/views/app-view.js[237:345]": "\n\t\treturn [].some.call(document.querySelectorAll(selector), function (el) {\n\t\t\treturn el === node;\n\t\t});\n\t",
    "js/views/app-view.js[2507:2637]": "\n\t\t\t\t\tel.classList.remove('selected');\n\t\t\t\t\tif (matchesSelector(el, selector)) {\n\t\t\t\t\t\tel.classList.add('selected');\n\t\t\t\t\t}\n\t\t\t\t",
    "js/views/app-view.js[2912:3037]": "\n\t\t\tvar view = new app.TodoView({ model: todo });\n\t\t\tdocument.querySelector('.todo-list').appendChild(view.render().el);\n\t\t",
    "js/views/app-view.js[3244:3277]": "\n\t\t\ttodo.trigger('visible');\n\t\t",
    "js/views/app-view.js[3305:3354]": "\n\t\t\tapp.todos.forEach(this.filterOne, this);\n\t\t",
    "js/views/app-view.js[3436:3550]": "\n\t\t\treturn {\n\t\t\t\ttitle: this.input.value.trim(),\n\t\t\t\torder: app.todos.nextOrder(),\n\t\t\t\tcompleted: false\n\t\t\t};\n\t\t",
    "js/views/app-view.js[3696:3848]": "\n\t\t\tif (e.which !== ENTER_KEY || !this.input.value.trim()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tapp.todos.create(this.newAttributes());\n\t\t\tthis.input.value = '';\n\t\t",
    "js/views/app-view.js[3943:4043]": "\n\t\t\tapp.todos.completed().forEach(function (todo) {\n\t\t\t\ttodo.destroy();\n\t\t\t});\n\t\t\treturn false;\n\t\t",
    "js/views/app-view.js[4079:4228]": "\n\t\t\tvar completed = this.allCheckbox.checked;\n\n\t\t\tapp.todos.forEach(function (todo) {\n\t\t\t\ttodo.save({\n\t\t\t\t\t'completed': completed\n\t\t\t\t});\n\t\t\t});\n\t\t"
}