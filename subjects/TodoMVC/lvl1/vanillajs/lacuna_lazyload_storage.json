{
    "node_modules/todomvc-common/base.js[197:548]": "\n\t\t\tif (!object) {\n\t\t\t\treturn object;\n\t\t\t}\n\t\t\tfor (var argsIndex = 1, argsLength = arguments.length; argsIndex < argsLength; argsIndex++) {\n\t\t\t\tvar iterable = arguments[argsIndex];\n\t\t\t\tif (iterable) {\n\t\t\t\t\tfor (var key in iterable) {\n\t\t\t\t\t\tif (object[key] == null) {\n\t\t\t\t\t\t\tobject[key] = iterable[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn object;\n\t\t",
    "node_modules/todomvc-common/base.js[1589:3333]": "\n\t\t\tvar render;\n\t\t\tsettings = _.defaults({}, settings, _.templateSettings);\n\n\t\t\t// Combine delimiters into one regular expression via alternation.\n\t\t\tvar matcher = new RegExp([\n\t\t\t\t(settings.escape || noMatch).source,\n\t\t\t\t(settings.interpolate || noMatch).source,\n\t\t\t\t(settings.evaluate || noMatch).source\n\t\t\t].join('|') + '|$', 'g');\n\n\t\t\t// Compile the template source, escaping string literals appropriately.\n\t\t\tvar index = 0;\n\t\t\tvar source = \"__p+='\";\n\t\t\ttext.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n\t\t\t\tsource += text.slice(index, offset)\n\t\t\t\t\t.replace(escaper, function(match) { return '\\\\' + escapes[match]; });\n\n\t\t\t\tif (escape) {\n\t\t\t\t\tsource += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n\t\t\t\t}\n\t\t\t\tif (interpolate) {\n\t\t\t\t\tsource += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n\t\t\t\t}\n\t\t\t\tif (evaluate) {\n\t\t\t\t\tsource += \"';\\n\" + evaluate + \"\\n__p+='\";\n\t\t\t\t}\n\t\t\t\tindex = offset + match.length;\n\t\t\t\treturn match;\n\t\t\t});\n\t\t\tsource += \"';\\n\";\n\n\t\t\t// If a variable is not specified, place data values in local scope.\n\t\t\tif (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n\t\t\tsource = \"var __t,__p='',__j=Array.prototype.join,\" +\n\t\t\t\t\"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n\t\t\t\tsource + \"return __p;\\n\";\n\n\t\t\ttry {\n\t\t\t\trender = new Function(settings.variable || 'obj', '_', source);\n\t\t\t} catch (e) {\n\t\t\t\te.source = source;\n\t\t\t\tthrow e;\n\t\t\t}\n\n\t\t\tif (data) return render(data, _);\n\t\t\tvar template = function(data) {\n\t\t\t\treturn render.call(this, data, _);\n\t\t\t};\n\n\t\t\t// Provide the compiled function source as a convenience for precompilation.\n\t\t\ttemplate.source = 'function(' + (settings.variable || 'obj') + '){\\n' + source + '}';\n\n\t\t\treturn template;\n\t\t",
    "node_modules/todomvc-common/base.js[3428:3647]": "i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n\t\t(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n\t\tm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n\t\t",
    "node_modules/todomvc-common/base.js[4522:5447]": "\n\t\tif (!(this instanceof Learn)) {\n\t\t\treturn new Learn(learnJSON, config);\n\t\t}\n\n\t\tvar template, framework;\n\n\t\tif (typeof learnJSON !== 'object') {\n\t\t\ttry {\n\t\t\t\tlearnJSON = JSON.parse(learnJSON);\n\t\t\t} catch (e) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (config) {\n\t\t\ttemplate = config.template;\n\t\t\tframework = config.framework;\n\t\t}\n\n\t\tif (!template && learnJSON.templates) {\n\t\t\ttemplate = learnJSON.templates.todomvc;\n\t\t}\n\n\t\tif (!framework && document.querySelector('[data-framework]')) {\n\t\t\tframework = document.querySelector('[data-framework]').dataset.framework;\n\t\t}\n\n\t\tthis.template = template;\n\n\t\tif (learnJSON.backend) {\n\t\t\tthis.frameworkJSON = learnJSON.backend;\n\t\t\tthis.frameworkJSON.issueLabel = framework;\n\t\t\tthis.append({\n\t\t\t\tbackend: true\n\t\t\t});\n\t\t} else if (learnJSON[framework]) {\n\t\t\tthis.frameworkJSON = learnJSON[framework];\n\t\t\tthis.frameworkJSON.issueLabel = framework;\n\t\t\tthis.append();\n\t\t}\n\n\t\tthis.fetchIssueCount();\n\t",
    "node_modules/todomvc-common/base.js[5491:6530]": "\n\t\tvar aside = document.createElement('aside');\n\t\taside.innerHTML = _.template(this.template, this.frameworkJSON);\n\t\taside.className = 'learn';\n\n\t\tif (opts && opts.backend) {\n\t\t\t// Remove demo link\n\t\t\tvar sourceLinks = aside.querySelector('.source-links');\n\t\t\tvar heading = sourceLinks.firstElementChild;\n\t\t\tvar sourceLink = sourceLinks.lastElementChild;\n\t\t\t// Correct link path\n\t\t\tvar href = sourceLink.getAttribute('href');\n\t\t\tsourceLink.setAttribute('href', href.substr(href.lastIndexOf('http')));\n\t\t\tsourceLinks.innerHTML = heading.outerHTML + sourceLink.outerHTML;\n\t\t} else {\n\t\t\t// Localize demo links\n\t\t\tvar demoLinks = aside.querySelectorAll('.demo-link');\n\t\t\tArray.prototype.forEach.call(demoLinks, function (demoLink) {\n\t\t\t\tif (demoLink.getAttribute('href').substr(0, 4) !== 'http') {\n\t\t\t\t\tdemoLink.setAttribute('href', findRoot() + demoLink.getAttribute('href'));\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tdocument.body.className = (document.body.className + ' learn-bar').trim();\n\t\tdocument.body.insertAdjacentHTML('afterBegin', aside.outerHTML);\n\t",
    "node_modules/todomvc-common/base.js[6580:7200]": "\n\t\tvar issueLink = document.getElementById('issue-count-link');\n\t\tif (issueLink) {\n\t\t\tvar url = issueLink.href.replace('https://github.com', 'https://api.github.com/repos');\n\t\t\tvar xhr = new XMLHttpRequest();\n\t\t\txhr.open('GET', url, true);\n\t\t\txhr.onload = function (e) {\n\t\t\t\tvar parsedResponse = JSON.parse(e.target.responseText);\n\t\t\t\tif (parsedResponse instanceof Array) {\n\t\t\t\t\tvar count = parsedResponse.length;\n\t\t\t\t\tif (count !== 0) {\n\t\t\t\t\t\tissueLink.innerHTML = 'This app has ' + count + ' open issues';\n\t\t\t\t\t\tdocument.getElementById('issue-count').style.display = 'inline';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\txhr.send();\n\t\t}\n\t",
    "js/helpers.js[235:296]": "\n\t\treturn (scope || document).querySelectorAll(selector);\n\t",
    "js/helpers.js[672:923]": "\n\t\t\tvar targetElement = event.target;\n\t\t\tvar potentialElements = window.qsa(selector, target);\n\t\t\tvar hasMatch = Array.prototype.indexOf.call(potentialElements, targetElement) >= 0;\n\n\t\t\tif (hasMatch) {\n\t\t\t\thandler.call(targetElement, event);\n\t\t\t}\n\t\t",
    "js/helpers.js[1234:1446]": "\n\t\tif (!element.parentNode) {\n\t\t\treturn;\n\t\t}\n\t\tif (element.parentNode.tagName.toLowerCase() === tagName.toLowerCase()) {\n\t\t\treturn element.parentNode;\n\t\t}\n\t\treturn window.$parent(element.parentNode, tagName);\n\t",
    "js/store.js[1129:1395]": "\n\t\tif (!callback) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar todos = JSON.parse(localStorage.getItem(this._dbName));\n\n\t\tcallback.call(this, todos.filter(function (todo) {\n\t\t\tfor (var q in query) {\n\t\t\t\tif (query[q] !== todo[q]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}));\n\t",
    "js/store.js[1618:1620]": "",
    "js/store.js[2128:2798]": "\n\t\tvar todos = JSON.parse(localStorage.getItem(this._dbName));\n\n\t\tcallback = callback || function() {};\n\n\t\t// If an ID was actually given, find the item and update each property\n\t\tif (id) {\n\t\t\tfor (var i = 0; i < todos.length; i++) {\n\t\t\t\tif (todos[i].id === id) {\n\t\t\t\t\tfor (var key in updateData) {\n\t\t\t\t\t\ttodos[i][key] = updateData[key];\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlocalStorage.setItem(this._dbName, JSON.stringify(todos));\n\t\t\tcallback.call(this, todos);\n\t\t} else {\n\t\t\t// Generate an ID\n\t\t\tupdateData.id = new Date().getTime();\n\n\t\t\ttodos.push(updateData);\n\t\t\tlocalStorage.setItem(this._dbName, JSON.stringify(todos));\n\t\t\tcallback.call(this, [updateData]);\n\t\t}\n\t",
    "js/store.js[3046:3320]": "\n\t\tvar todos = JSON.parse(localStorage.getItem(this._dbName));\n\n\t\tfor (var i = 0; i < todos.length; i++) {\n\t\t\tif (todos[i].id == id) {\n\t\t\t\ttodos.splice(i, 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tlocalStorage.setItem(this._dbName, JSON.stringify(todos));\n\t\tcallback.call(this, todos);\n\t",
    "js/store.js[3499:3612]": "\n\t\tvar todos = [];\n\t\tlocalStorage.setItem(this._dbName, JSON.stringify(todos));\n\t\tcallback.call(this, todos);\n\t",
    "js/model.js[484:661]": "\n\t\ttitle = title || '';\n\t\tcallback = callback || function () {};\n\n\t\tvar newItem = {\n\t\t\ttitle: title.trim(),\n\t\t\tcompleted: false\n\t\t};\n\n\t\tthis.storage.save(newItem, callback);\n\t",
    "js/model.js[1444:1446]": "",
    "js/model.js[2135:2180]": "\n\t\tthis.storage.save(data, callback, id);\n\t",
    "js/model.js[2415:2456]": "\n\t\tthis.storage.remove(id, callback);\n\t",
    "js/model.js[2649:2684]": "\n\t\tthis.storage.drop(callback);\n\t",
    "js/model.js[2918:3034]": "\n\t\t\t\tif (todo.completed) {\n\t\t\t\t\ttodos.completed++;\n\t\t\t\t} else {\n\t\t\t\t\ttodos.active++;\n\t\t\t\t}\n\n\t\t\t\ttodos.total++;\n\t\t\t",
    "js/template.js[223:254]": "\n\t\treturn htmlEscapes[chr];\n\t",
    "js/template.js[388:511]": "\n\t\treturn (string && reHasUnescapedHtml.test(string))\n\t\t\t? string.replace(reUnescapedHtml, escapeHtmlChar)\n\t\t\t: string;\n\t",
    "js/view.js[831:934]": "\n\t\tvar elem = qs('[data-id=\"' + id + '\"]');\n\n\t\tif (elem) {\n\t\t\tthis.$todoList.removeChild(elem);\n\t\t}\n\t",
    "js/view.js[1407:1668]": "\n\t\tvar listItem = qs('[data-id=\"' + id + '\"]');\n\n\t\tif (!listItem) {\n\t\t\treturn;\n\t\t}\n\n\t\tlistItem.className = completed ? 'completed' : '';\n\n\t\t// In case it was toggled from an event and not by clicking the checkbox\n\t\tqs('input', listItem).checked = completed;\n\t",
    "js/view.js[1720:2011]": "\n\t\tvar listItem = qs('[data-id=\"' + id + '\"]');\n\n\t\tif (!listItem) {\n\t\t\treturn;\n\t\t}\n\n\t\tlistItem.className = listItem.className + ' editing';\n\n\t\tvar input = document.createElement('input');\n\t\tinput.className = 'edit';\n\n\t\tlistItem.appendChild(input);\n\t\tinput.focus();\n\t\tinput.value = title;\n\t",
    "js/view.js[2067:2383]": "\n\t\tvar listItem = qs('[data-id=\"' + id + '\"]');\n\n\t\tif (!listItem) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar input = qs('input.edit', listItem);\n\t\tlistItem.removeChild(input);\n\n\t\tlistItem.className = listItem.className.replace('editing', '');\n\n\t\tqsa('label', listItem).forEach(function (label) {\n\t\t\tlabel.textContent = title;\n\t\t});\n\t",
    "js/view.js[2610:2649]": "\n\t\t\t\tself._removeItem(parameter);\n\t\t\t",
    "js/view.js[3210:3246]": "\n\t\t\t\tself.$newTodo.value = '';\n\t\t\t",
    "js/view.js[3280:3348]": "\n\t\t\t\tself._elementComplete(parameter.id, parameter.completed);\n\t\t\t",
    "js/view.js[3375:3432]": "\n\t\t\t\tself._editItem(parameter.id, parameter.title);\n\t\t\t",
    "js/view.js[3463:3524]": "\n\t\t\t\tself._editItemDone(parameter.id, parameter.title);\n\t\t\t",
    "js/view.js[3608:3685]": "\n\t\tvar li = $parent(element, 'li');\n\t\treturn parseInt(li.dataset.id, 10);\n\t",
    "js/view.js[3824:3943]": "\n\t\t\tif (!this.dataset.iscanceled) {\n\t\t\t\thandler({\n\t\t\t\t\tid: self._itemId(this),\n\t\t\t\t\ttitle: this.value\n\t\t\t\t});\n\t\t\t}\n\t\t",
    "js/view.js[4016:4185]": "\n\t\t\tif (event.keyCode === self.ENTER_KEY) {\n\t\t\t\t// Remove the cursor from the input when you hit enter just like if it\n\t\t\t\t// were a real form\n\t\t\t\tthis.blur();\n\t\t\t}\n\t\t",
    "js/view.js[4337:4484]": "\n\t\t\tif (event.keyCode === self.ESCAPE_KEY) {\n\t\t\t\tthis.dataset.iscanceled = true;\n\t\t\t\tthis.blur();\n\n\t\t\t\thandler({id: self._itemId(this)});\n\t\t\t}\n\t\t",
    "js/view.js[4635:4675]": "\n\t\t\t\thandler(self.$newTodo.value);\n\t\t\t",
    "js/view.js[4773:4794]": "\n\t\t\t\thandler();\n\t\t\t",
    "js/view.js[4881:4927]": "\n\t\t\t\thandler({completed: this.checked});\n\t\t\t",
    "js/view.js[5033:5078]": "\n\t\t\t\thandler({id: self._itemId(this)});\n\t\t\t",
    "js/view.js[5183:5228]": "\n\t\t\t\thandler({id: self._itemId(this)});\n\t\t\t",
    "js/view.js[5332:5418]": "\n\t\t\t\thandler({\n\t\t\t\t\tid: self._itemId(this),\n\t\t\t\t\tcompleted: this.checked\n\t\t\t\t});\n\t\t\t",
    "js/controller.js[366:395]": "\n\t\t\tself.addItem(title);\n\t\t",
    "js/controller.js[444:476]": "\n\t\t\tself.editItem(item.id);\n\t\t",
    "js/controller.js[529:577]": "\n\t\t\tself.editItemSave(item.id, item.title);\n\t\t",
    "js/controller.js[632:670]": "\n\t\t\tself.editItemCancel(item.id);\n\t\t",
    "js/controller.js[721:755]": "\n\t\t\tself.removeItem(item.id);\n\t\t",
    "js/controller.js[806:860]": "\n\t\t\tself.toggleComplete(item.id, item.completed);\n\t\t",
    "js/controller.js[912:949]": "\n\t\t\tself.removeCompletedItems();\n\t\t",
    "js/controller.js[1001:1043]": "\n\t\t\tself.toggleAll(status.completed);\n\t\t",
    "js/controller.js[1648:1777]": "\n\t\tvar self = this;\n\t\tself.model.read({ completed: false }, function (data) {\n\t\t\tself.view.render('showEntries', data);\n\t\t});\n\t",
    "js/controller.js[1872:2000]": "\n\t\tvar self = this;\n\t\tself.model.read({ completed: true }, function (data) {\n\t\t\tself.view.render('showEntries', data);\n\t\t});\n\t",
    "js/controller.js[2216:2392]": "\n\t\tvar self = this;\n\n\t\tif (title.trim() === '') {\n\t\t\treturn;\n\t\t}\n\n\t\tself.model.create(title, function () {\n\t\t\tself.view.render('clearNewTodo');\n\t\t\tself._filter(true);\n\t\t});\n\t",
    "js/controller.js[2487:2621]": "\n\t\tvar self = this;\n\t\tself.model.read(id, function (data) {\n\t\t\tself.view.render('editItem', {id: id, title: data[0].title});\n\t\t});\n\t",
    "js/controller.js[2740:2979]": "\n\t\tvar self = this;\n\t\ttitle = title.trim();\n\n\t\tif (title.length !== 0) {\n\t\t\tself.model.update(id, {title: title}, function () {\n\t\t\t\tself.view.render('editItemDone', {id: id, title: title});\n\t\t\t});\n\t\t} else {\n\t\t\tself.removeItem(id);\n\t\t}\n\t",
    "js/controller.js[3079:3217]": "\n\t\tvar self = this;\n\t\tself.model.read(id, function (data) {\n\t\t\tself.view.render('editItemDone', {id: id, title: data[0].title});\n\t\t});\n\t",
    "js/controller.js[3492:3617]": "\n\t\tvar self = this;\n\t\tself.model.remove(id, function () {\n\t\t\tself.view.render('removeItem', id);\n\t\t});\n\n\t\tself._filter();\n\t",
    "js/controller.js[3749:3925]": "\n\t\tvar self = this;\n\t\tself.model.read({ completed: true }, function (data) {\n\t\t\tdata.forEach(function (item) {\n\t\t\t\tself.removeItem(item.id);\n\t\t\t});\n\t\t});\n\n\t\tself._filter();\n\t",
    "js/controller.js[4386:4605]": "\n\t\tvar self = this;\n\t\tself.model.update(id, { completed: completed }, function () {\n\t\t\tself.view.render('elementComplete', {\n\t\t\t\tid: id,\n\t\t\t\tcompleted: completed\n\t\t\t});\n\t\t});\n\n\t\tif (!silent) {\n\t\t\tself._filter();\n\t\t}\n\t",
    "js/controller.js[4781:4984]": "\n\t\tvar self = this;\n\t\tself.model.read({ completed: !completed }, function (data) {\n\t\t\tdata.forEach(function (item) {\n\t\t\t\tself.toggleComplete(item.id, completed, true);\n\t\t\t});\n\t\t});\n\n\t\tself._filter();\n\t"
}