(function(define) {
  if (typeof define == "undefined") {
    define = function(deps, fn) {
      can.Model.LocalStorage = fn(can.Model);
    }
  }

  define(['can/model'], function(Model) {
    return Model.extend({
      // Implement local storage handling
      localStore: function(cb) {
        var name = this.name,
          data = JSON.parse(window.localStorage[name] || (window.localStorage[name] = '[]')),
          res = cb.call(this, data);
        if (res !== false) {
          can.each(data, function(todo) {});
          window.localStorage[name] = JSON.stringify(data);
        }
      },

      findAll: function(params) {
        var def = new can.Deferred();
        this.localStore(function(todos) {
          var instances = [],
            self = this;
          can.each(todos, function(todo) {});
          def.resolve({data: instances});
        });
        return def;
      },

      destroy: function(id) {},

      create: function(attrs) {},

      update: function(id, attrs) {}
    }, {});
  });
})(window.define);
