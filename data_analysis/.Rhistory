filtered_by_level <- data_wild %>% filter(lvl == "0")
level_zero_line <- summary(filtered_by_level[[names(var)]])[['Median']]
bp <- ggplot(data_wild, aes(x=lvl, y=data_wild[[names(var)]])) + ylim(min_y_value, max_y_value) +
geom_violin(trim = FALSE, alpha = 0.5, position=position_dodge(0.9)) + theme_bw() + xlab("") + ylab('') +
geom_boxplot(alpha=1, color="black", width=.2, fill="white", outlier.size=0) +
stat_summary(fun.y=mean, colour="black", geom="point",
shape=5, size=1,show_guide = FALSE) +
ggtitle('In-the-wild subjects') +
geom_hline(yintercept=level_zero_line, linetype="dashed", color = "red") +
guides(color=guide_legend(title="")) + theme(plot.title=element_text(size=fontSize), strip.text.x=element_text(size=fontSize), strip.text.y=element_text(size=fontSize),  axis.text.x=element_text(size=fontSize, angle = 45, hjust = 1), axis.text.y=element_text(size=fontSize), axis.title=element_text(size=fontSize)) +
scale_x_discrete(labels=c("0" = "OL-0", "1" = "OL-1", "2" = "OL-2", "3" = "OL-3"))
ggsave(paste('./plots/', names(var), '_wild.pdf', sep=''), scale = 1.6, height = 6, width = 4, unit = "cm")
}
fontSize = 12
for (i in seq(1,length(vars))) {
var <- vars[i]
min_y_value <- min(data[[names(var)]])
max_y_value <- max(data[[names(var)]])
if(names(var) == 'cpu' || names(var) == 'gpu') {
max_y_value <- 100
}
filtered_by_level <- data_lab %>% filter(lvl == "0")
level_zero_line <- summary(filtered_by_level[[names(var)]])[['Median']]
# Compute the Kruskal-Wallis test
res.kruskal <- data_lab %>% kruskal_test(as.formula(paste(names(var), '~ lvl')))
# Compute the Chi2 effect size estimation
chi2 <- data_lab %>% kruskal_effsize(as.formula(paste(names(var), '~ lvl')))
# Compute the Dunn's test across all possible pairs of the optimization levels
pwc <- data_lab %>% dunn_test(as.formula(paste(names(var), '~ lvl')), p.adjust.method = "BH")
# make a boxplot to get a graphical overview of the results
pwc <- pwc %>% add_xy_position(x = "lvl")
print(pwc)
bp <- ggplot(data_lab, aes(x=lvl, y=data_lab[[names(var)]])) + ylim(min_y_value, max_y_value) +
geom_violin(trim = FALSE, alpha = 0.5, position=position_dodge(0.9)) + theme_bw() + xlab("") + ylab(var) +
geom_boxplot(alpha=1, color="black", width=.2, fill="white", outlier.size=0) +
stat_summary(fun.y=mean, colour="black", geom="point",
shape=5, size=1,show_guide = FALSE) +
ggtitle('In-the-lab subjects') +
geom_hline(yintercept=level_zero_line, linetype="dashed", color = "red") +
stat_pvalue_manual(pwc, label = "p.adj.signif", tip.length = 0.01, hide.ns = TRUE) +
guides(color=guide_legend(title="")) + theme(plot.title=element_text(size=fontSize), strip.text.x=element_text(size=fontSize), strip.text.y=element_text(size=fontSize),  axis.text.x=element_text(size=fontSize, angle = 45, hjust = 1), axis.text.y=element_text(size=fontSize), axis.title=element_text(size=fontSize)) +
scale_x_discrete(labels=c("0" = "OL-0", "1" = "OL-1", "2" = "OL-2", "3" = "OL-3"))
ggsave(paste('./plots/', names(var), '_lab.pdf', sep=''), scale = 1.6, height = 6, width = 4, unit = "cm")
filtered_by_level <- data_wild %>% filter(lvl == "0")
level_zero_line <- summary(filtered_by_level[[names(var)]])[['Median']]
bp <- ggplot(data_wild, aes(x=lvl, y=data_wild[[names(var)]])) + ylim(min_y_value, max_y_value) +
geom_violin(trim = FALSE, alpha = 0.5, position=position_dodge(0.9)) + theme_bw() + xlab("") + ylab('') +
geom_boxplot(alpha=1, color="black", width=.2, fill="white", outlier.size=0) +
stat_summary(fun.y=mean, colour="black", geom="point",
shape=5, size=1,show_guide = FALSE) +
ggtitle('In-the-wild subjects') +
geom_hline(yintercept=level_zero_line, linetype="dashed", color = "red") +
guides(color=guide_legend(title="")) + theme(plot.title=element_text(size=fontSize), strip.text.x=element_text(size=fontSize), strip.text.y=element_text(size=fontSize),  axis.text.x=element_text(size=fontSize, angle = 45, hjust = 1), axis.text.y=element_text(size=fontSize), axis.title=element_text(size=fontSize)) +
scale_x_discrete(labels=c("0" = "OL-0", "1" = "OL-1", "2" = "OL-2", "3" = "OL-3"))
ggsave(paste('./plots/', names(var), '_wild.pdf', sep=''), scale = 1.6, height = 6, width = 4, unit = "cm")
}
fontSize = 12
for (i in seq(1,length(vars))) {
var <- vars[i]
min_y_value <- min(data[[names(var)]])
max_y_value <- max(data[[names(var)]])
if(names(var) == 'cpu' || names(var) == 'gpu') {
max_y_value <- 100
}
filtered_by_level <- data_lab %>% filter(lvl == "0")
level_zero_line <- summary(filtered_by_level[[names(var)]])[['Median']]
# Compute the Kruskal-Wallis test
res.kruskal <- data_lab %>% kruskal_test(as.formula(paste(names(var), '~ lvl')))
# Compute the Chi2 effect size estimation
chi2 <- data_lab %>% kruskal_effsize(as.formula(paste(names(var), '~ lvl')))
# Compute the Dunn's test across all possible pairs of the optimization levels
pwc <- data_lab %>% dunn_test(as.formula(paste(names(var), '~ lvl')), p.adjust.method = "BH")
# make a boxplot to get a graphical overview of the results
# pwc <- pwc %>% add_xy_position(x = "lvl")
print(pwc)
bp <- ggplot(data_lab, aes(x=lvl, y=data_lab[[names(var)]])) + ylim(min_y_value, max_y_value) +
geom_violin(trim = FALSE, alpha = 0.5, position=position_dodge(0.9)) + theme_bw() + xlab("") + ylab(var) +
geom_boxplot(alpha=1, color="black", width=.2, fill="white", outlier.size=0) +
stat_summary(fun.y=mean, colour="black", geom="point",
shape=5, size=1,show_guide = FALSE) +
ggtitle('In-the-lab subjects') +
geom_hline(yintercept=level_zero_line, linetype="dashed", color = "red") +
stat_pvalue_manual(pwc, label = "p.adj.signif", tip.length = 0.01, hide.ns = TRUE) +
guides(color=guide_legend(title="")) + theme(plot.title=element_text(size=fontSize), strip.text.x=element_text(size=fontSize), strip.text.y=element_text(size=fontSize),  axis.text.x=element_text(size=fontSize, angle = 45, hjust = 1), axis.text.y=element_text(size=fontSize), axis.title=element_text(size=fontSize)) +
scale_x_discrete(labels=c("0" = "OL-0", "1" = "OL-1", "2" = "OL-2", "3" = "OL-3"))
ggsave(paste('./plots/', names(var), '_lab.pdf', sep=''), scale = 1.6, height = 6, width = 4, unit = "cm")
filtered_by_level <- data_wild %>% filter(lvl == "0")
level_zero_line <- summary(filtered_by_level[[names(var)]])[['Median']]
bp <- ggplot(data_wild, aes(x=lvl, y=data_wild[[names(var)]])) + ylim(min_y_value, max_y_value) +
geom_violin(trim = FALSE, alpha = 0.5, position=position_dodge(0.9)) + theme_bw() + xlab("") + ylab('') +
geom_boxplot(alpha=1, color="black", width=.2, fill="white", outlier.size=0) +
stat_summary(fun.y=mean, colour="black", geom="point",
shape=5, size=1,show_guide = FALSE) +
ggtitle('In-the-wild subjects') +
geom_hline(yintercept=level_zero_line, linetype="dashed", color = "red") +
guides(color=guide_legend(title="")) + theme(plot.title=element_text(size=fontSize), strip.text.x=element_text(size=fontSize), strip.text.y=element_text(size=fontSize),  axis.text.x=element_text(size=fontSize, angle = 45, hjust = 1), axis.text.y=element_text(size=fontSize), axis.title=element_text(size=fontSize)) +
scale_x_discrete(labels=c("0" = "OL-0", "1" = "OL-1", "2" = "OL-2", "3" = "OL-3"))
ggsave(paste('./plots/', names(var), '_wild.pdf', sep=''), scale = 1.6, height = 6, width = 4, unit = "cm")
}
fontSize = 12
for (i in seq(1,length(vars))) {
var <- vars[i]
min_y_value <- min(data[[names(var)]])
max_y_value <- max(data[[names(var)]])
if(names(var) == 'cpu' || names(var) == 'gpu') {
max_y_value <- 100
}
filtered_by_level <- data_lab %>% filter(lvl == "0")
level_zero_line <- summary(filtered_by_level[[names(var)]])[['Median']]
pwc <- data_lab %>% dunn_test(as.formula(paste(names(var), '~ lvl')), p.adjust.method = "BH")
# make a boxplot to get a graphical overview of the results
pwc <- pwc %>% add_xy_position(x = "lvl")
print(pwc)
bp <- ggplot(data_lab, aes(x=lvl, y=data_lab[[names(var)]])) + ylim(min_y_value, max_y_value) +
geom_violin(trim = FALSE, alpha = 0.5, position=position_dodge(0.9)) + theme_bw() + xlab("") + ylab(var) +
geom_boxplot(alpha=1, color="black", width=.2, fill="white", outlier.size=0) +
stat_summary(fun.y=mean, colour="black", geom="point",
shape=5, size=1,show_guide = FALSE) +
ggtitle('In-the-lab subjects') +
geom_hline(yintercept=level_zero_line, linetype="dashed", color = "red") +
stat_pvalue_manual(pwc, label = "p.adj.signif", hide.ns = TRUE) +
guides(color=guide_legend(title="")) + theme(plot.title=element_text(size=fontSize), strip.text.x=element_text(size=fontSize), strip.text.y=element_text(size=fontSize),  axis.text.x=element_text(size=fontSize, angle = 45, hjust = 1), axis.text.y=element_text(size=fontSize), axis.title=element_text(size=fontSize)) +
scale_x_discrete(labels=c("0" = "OL-0", "1" = "OL-1", "2" = "OL-2", "3" = "OL-3"))
ggsave(paste('./plots/', names(var), '_lab.pdf', sep=''), scale = 1.6, height = 6, width = 4, unit = "cm")
filtered_by_level <- data_wild %>% filter(lvl == "0")
level_zero_line <- summary(filtered_by_level[[names(var)]])[['Median']]
bp <- ggplot(data_wild, aes(x=lvl, y=data_wild[[names(var)]])) + ylim(min_y_value, max_y_value) +
geom_violin(trim = FALSE, alpha = 0.5, position=position_dodge(0.9)) + theme_bw() + xlab("") + ylab('') +
geom_boxplot(alpha=1, color="black", width=.2, fill="white", outlier.size=0) +
stat_summary(fun.y=mean, colour="black", geom="point",
shape=5, size=1,show_guide = FALSE) +
ggtitle('In-the-wild subjects') +
geom_hline(yintercept=level_zero_line, linetype="dashed", color = "red") +
guides(color=guide_legend(title="")) + theme(plot.title=element_text(size=fontSize), strip.text.x=element_text(size=fontSize), strip.text.y=element_text(size=fontSize),  axis.text.x=element_text(size=fontSize, angle = 45, hjust = 1), axis.text.y=element_text(size=fontSize), axis.title=element_text(size=fontSize)) +
scale_x_discrete(labels=c("0" = "OL-0", "1" = "OL-1", "2" = "OL-2", "3" = "OL-3"))
ggsave(paste('./plots/', names(var), '_wild.pdf', sep=''), scale = 1.6, height = 6, width = 4, unit = "cm")
}
fontSize = 12
for (i in seq(1,length(vars))) {
var <- vars[i]
min_y_value <- min(data[[names(var)]])
max_y_value <- max(data[[names(var)]])
if(names(var) == 'cpu' || names(var) == 'gpu') {
max_y_value <- 100
}
filtered_by_level <- data_lab %>% filter(lvl == "0")
level_zero_line <- summary(filtered_by_level[[names(var)]])[['Median']]
pwc <- data_lab %>% dunn_test(as.formula(paste(names(var), '~ lvl')), p.adjust.method = "BH")
# make a boxplot to get a graphical overview of the results
pwc <- pwc %>% add_xy_position(x = "lvl")
print(pwc)
bp <- ggplot(data_lab, aes(x=lvl, y=data_lab[[names(var)]])) + ylim(min_y_value, max_y_value) +
geom_violin(trim = FALSE, alpha = 0.5, position=position_dodge(0.9)) + theme_bw() + xlab("") + ylab(var) +
geom_boxplot(alpha=1, color="black", width=.2, fill="white", outlier.size=0) +
stat_summary(fun.y=mean, colour="black", geom="point",
shape=5, size=1,show_guide = FALSE) +
ggtitle('In-the-lab subjects') +
geom_hline(yintercept=level_zero_line, linetype="dashed", color = "red") +
stat_pvalue_manual(pwc, label = "p.adj.signif", bracket.nudge.y = -2) +
guides(color=guide_legend(title="")) + theme(plot.title=element_text(size=fontSize), strip.text.x=element_text(size=fontSize), strip.text.y=element_text(size=fontSize),  axis.text.x=element_text(size=fontSize, angle = 45, hjust = 1), axis.text.y=element_text(size=fontSize), axis.title=element_text(size=fontSize)) +
scale_x_discrete(labels=c("0" = "OL-0", "1" = "OL-1", "2" = "OL-2", "3" = "OL-3"))
ggsave(paste('./plots/', names(var), '_lab.pdf', sep=''), scale = 1.6, height = 6, width = 4, unit = "cm")
filtered_by_level <- data_wild %>% filter(lvl == "0")
level_zero_line <- summary(filtered_by_level[[names(var)]])[['Median']]
bp <- ggplot(data_wild, aes(x=lvl, y=data_wild[[names(var)]])) + ylim(min_y_value, max_y_value) +
geom_violin(trim = FALSE, alpha = 0.5, position=position_dodge(0.9)) + theme_bw() + xlab("") + ylab('') +
geom_boxplot(alpha=1, color="black", width=.2, fill="white", outlier.size=0) +
stat_summary(fun.y=mean, colour="black", geom="point",
shape=5, size=1,show_guide = FALSE) +
ggtitle('In-the-wild subjects') +
geom_hline(yintercept=level_zero_line, linetype="dashed", color = "red") +
guides(color=guide_legend(title="")) + theme(plot.title=element_text(size=fontSize), strip.text.x=element_text(size=fontSize), strip.text.y=element_text(size=fontSize),  axis.text.x=element_text(size=fontSize, angle = 45, hjust = 1), axis.text.y=element_text(size=fontSize), axis.title=element_text(size=fontSize)) +
scale_x_discrete(labels=c("0" = "OL-0", "1" = "OL-1", "2" = "OL-2", "3" = "OL-3"))
ggsave(paste('./plots/', names(var), '_wild.pdf', sep=''), scale = 1.6, height = 6, width = 4, unit = "cm")
}
fontSize = 12
for (i in seq(1,length(vars))) {
var <- vars[i]
min_y_value <- min(data[[names(var)]])
max_y_value <- max(data[[names(var)]])
if(names(var) == 'cpu' || names(var) == 'gpu') {
max_y_value <- 100
}
filtered_by_level <- data_lab %>% filter(lvl == "0")
level_zero_line <- summary(filtered_by_level[[names(var)]])[['Median']]
pwc <- data_lab %>% dunn_test(as.formula(paste(names(var), '~ lvl')), p.adjust.method = "BH")
# make a boxplot to get a graphical overview of the results
pwc <- pwc %>% add_xy_position(x = "lvl")
print(pwc)
bp <- ggplot(data_lab, aes(x=lvl, y=data_lab[[names(var)]])) + ylim(min_y_value, max_y_value) +
geom_violin(trim = FALSE, alpha = 0.5, position=position_dodge(0.9)) + theme_bw() + xlab("") + ylab(var) +
stat_pvalue_manual(pwc, label = "p.adj.signif", hide.ns = TRUE) +
geom_boxplot(alpha=1, color="black", width=.2, fill="white", outlier.size=0) +
stat_summary(fun.y=mean, colour="black", geom="point",
shape=5, size=1,show_guide = FALSE) +
ggtitle('In-the-lab subjects') +
geom_hline(yintercept=level_zero_line, linetype="dashed", color = "red") +
guides(color=guide_legend(title="")) + theme(plot.title=element_text(size=fontSize), strip.text.x=element_text(size=fontSize), strip.text.y=element_text(size=fontSize),  axis.text.x=element_text(size=fontSize, angle = 45, hjust = 1), axis.text.y=element_text(size=fontSize), axis.title=element_text(size=fontSize)) +
scale_x_discrete(labels=c("0" = "OL-0", "1" = "OL-1", "2" = "OL-2", "3" = "OL-3"))
ggsave(paste('./plots/', names(var), '_lab.pdf', sep=''), scale = 1.6, height = 6, width = 4, unit = "cm")
filtered_by_level <- data_wild %>% filter(lvl == "0")
level_zero_line <- summary(filtered_by_level[[names(var)]])[['Median']]
bp <- ggplot(data_wild, aes(x=lvl, y=data_wild[[names(var)]])) + ylim(min_y_value, max_y_value) +
geom_violin(trim = FALSE, alpha = 0.5, position=position_dodge(0.9)) + theme_bw() + xlab("") + ylab('') +
geom_boxplot(alpha=1, color="black", width=.2, fill="white", outlier.size=0) +
stat_summary(fun.y=mean, colour="black", geom="point",
shape=5, size=1,show_guide = FALSE) +
ggtitle('In-the-wild subjects') +
geom_hline(yintercept=level_zero_line, linetype="dashed", color = "red") +
guides(color=guide_legend(title="")) + theme(plot.title=element_text(size=fontSize), strip.text.x=element_text(size=fontSize), strip.text.y=element_text(size=fontSize),  axis.text.x=element_text(size=fontSize, angle = 45, hjust = 1), axis.text.y=element_text(size=fontSize), axis.title=element_text(size=fontSize)) +
scale_x_discrete(labels=c("0" = "OL-0", "1" = "OL-1", "2" = "OL-2", "3" = "OL-3"))
ggsave(paste('./plots/', names(var), '_wild.pdf', sep=''), scale = 1.6, height = 6, width = 4, unit = "cm")
}
fontSize = 12
for (i in seq(1,length(vars))) {
var <- vars[i]
min_y_value <- min(data[[names(var)]])
max_y_value <- max(data[[names(var)]])
if(names(var) == 'cpu' || names(var) == 'gpu') {
max_y_value <- 100
}
filtered_by_level <- data_lab %>% filter(lvl == "0")
level_zero_line <- summary(filtered_by_level[[names(var)]])[['Median']]
pwc <- data_lab %>% dunn_test(as.formula(paste(names(var), '~ lvl')), p.adjust.method = "BH")
# make a boxplot to get a graphical overview of the results
pwc <- pwc %>% add_xy_position(x = "lvl")
print(pwc)
bp <- ggplot(data_lab, aes(x=lvl, y=data_lab[[names(var)]])) + ylim(min_y_value, max_y_value) +
geom_violin(trim = FALSE, alpha = 0.5, position=position_dodge(0.9)) + theme_bw() + xlab("") + ylab(var) +
stat_pvalue_manual(pwc, label = "p.adj", hide.ns = TRUE) +
geom_boxplot(alpha=1, color="black", width=.2, fill="white", outlier.size=0) +
stat_summary(fun.y=mean, colour="black", geom="point",
shape=5, size=1,show_guide = FALSE) +
ggtitle('In-the-lab subjects') +
geom_hline(yintercept=level_zero_line, linetype="dashed", color = "red") +
guides(color=guide_legend(title="")) + theme(plot.title=element_text(size=fontSize), strip.text.x=element_text(size=fontSize), strip.text.y=element_text(size=fontSize),  axis.text.x=element_text(size=fontSize, angle = 45, hjust = 1), axis.text.y=element_text(size=fontSize), axis.title=element_text(size=fontSize)) +
scale_x_discrete(labels=c("0" = "OL-0", "1" = "OL-1", "2" = "OL-2", "3" = "OL-3"))
ggsave(paste('./plots/', names(var), '_lab.pdf', sep=''), scale = 1.6, height = 6, width = 4, unit = "cm")
filtered_by_level <- data_wild %>% filter(lvl == "0")
level_zero_line <- summary(filtered_by_level[[names(var)]])[['Median']]
bp <- ggplot(data_wild, aes(x=lvl, y=data_wild[[names(var)]])) + ylim(min_y_value, max_y_value) +
geom_violin(trim = FALSE, alpha = 0.5, position=position_dodge(0.9)) + theme_bw() + xlab("") + ylab('') +
geom_boxplot(alpha=1, color="black", width=.2, fill="white", outlier.size=0) +
stat_summary(fun.y=mean, colour="black", geom="point",
shape=5, size=1,show_guide = FALSE) +
ggtitle('In-the-wild subjects') +
geom_hline(yintercept=level_zero_line, linetype="dashed", color = "red") +
guides(color=guide_legend(title="")) + theme(plot.title=element_text(size=fontSize), strip.text.x=element_text(size=fontSize), strip.text.y=element_text(size=fontSize),  axis.text.x=element_text(size=fontSize, angle = 45, hjust = 1), axis.text.y=element_text(size=fontSize), axis.title=element_text(size=fontSize)) +
scale_x_discrete(labels=c("0" = "OL-0", "1" = "OL-1", "2" = "OL-2", "3" = "OL-3"))
ggsave(paste('./plots/', names(var), '_wild.pdf', sep=''), scale = 1.6, height = 6, width = 4, unit = "cm")
}
fontSize = 12
for (i in seq(1,length(vars))) {
var <- vars[i]
min_y_value <- min(data[[names(var)]])
max_y_value <- max(data[[names(var)]])
if(names(var) == 'cpu' || names(var) == 'gpu') {
max_y_value <- 100
}
filtered_by_level <- data_lab %>% filter(lvl == "0")
level_zero_line <- summary(filtered_by_level[[names(var)]])[['Median']]
pwc <- data_lab %>% dunn_test(as.formula(paste(names(var), '~ lvl')), p.adjust.method = "BH")
# make a boxplot to get a graphical overview of the results
pwc <- pwc %>% add_xy_position(x = "lvl")
print(pwc)
bp <- ggplot(data_lab, aes(x=lvl, y=data_lab[[names(var)]])) + ylim(min_y_value, max_y_value) +
# geom_violin(trim = FALSE, alpha = 0.5, position=position_dodge(0.9)) + theme_bw() + xlab("") + ylab(var) +
stat_pvalue_manual(pwc, label = "p.adj.signif", hide.ns = TRUE) +
geom_boxplot(alpha=1, color="black", width=.2, fill="white", outlier.size=0) +
stat_summary(fun.y=mean, colour="black", geom="point",
shape=5, size=1,show_guide = FALSE) +
ggtitle('In-the-lab subjects') +
geom_hline(yintercept=level_zero_line, linetype="dashed", color = "red") +
guides(color=guide_legend(title="")) + theme(plot.title=element_text(size=fontSize), strip.text.x=element_text(size=fontSize), strip.text.y=element_text(size=fontSize),  axis.text.x=element_text(size=fontSize, angle = 45, hjust = 1), axis.text.y=element_text(size=fontSize), axis.title=element_text(size=fontSize)) +
scale_x_discrete(labels=c("0" = "OL-0", "1" = "OL-1", "2" = "OL-2", "3" = "OL-3"))
ggsave(paste('./plots/', names(var), '_lab.pdf', sep=''), scale = 1.6, height = 6, width = 4, unit = "cm")
filtered_by_level <- data_wild %>% filter(lvl == "0")
level_zero_line <- summary(filtered_by_level[[names(var)]])[['Median']]
bp <- ggplot(data_wild, aes(x=lvl, y=data_wild[[names(var)]])) + ylim(min_y_value, max_y_value) +
geom_violin(trim = FALSE, alpha = 0.5, position=position_dodge(0.9)) + theme_bw() + xlab("") + ylab('') +
geom_boxplot(alpha=1, color="black", width=.2, fill="white", outlier.size=0) +
stat_summary(fun.y=mean, colour="black", geom="point",
shape=5, size=1,show_guide = FALSE) +
ggtitle('In-the-wild subjects') +
geom_hline(yintercept=level_zero_line, linetype="dashed", color = "red") +
guides(color=guide_legend(title="")) + theme(plot.title=element_text(size=fontSize), strip.text.x=element_text(size=fontSize), strip.text.y=element_text(size=fontSize),  axis.text.x=element_text(size=fontSize, angle = 45, hjust = 1), axis.text.y=element_text(size=fontSize), axis.title=element_text(size=fontSize)) +
scale_x_discrete(labels=c("0" = "OL-0", "1" = "OL-1", "2" = "OL-2", "3" = "OL-3"))
ggsave(paste('./plots/', names(var), '_wild.pdf', sep=''), scale = 1.6, height = 6, width = 4, unit = "cm")
}
fontSize = 12
for (i in seq(1,length(vars))) {
var <- vars[i]
min_y_value <- min(data[[names(var)]])
max_y_value <- max(data[[names(var)]])
if(names(var) == 'cpu' || names(var) == 'gpu') {
max_y_value <- 100
}
filtered_by_level <- data_lab %>% filter(lvl == "0")
level_zero_line <- summary(filtered_by_level[[names(var)]])[['Median']]
bp <- ggplot(data_lab, aes(x=lvl, y=data_lab[[names(var)]])) + ylim(min_y_value, max_y_value) +
geom_violin(trim = FALSE, alpha = 0.5, position=position_dodge(0.9)) + theme_bw() + xlab("") + ylab(var) +
geom_boxplot(alpha=1, color="black", width=.2, fill="white", outlier.size=0) +
stat_summary(fun.y=mean, colour="black", geom="point",
shape=5, size=1,show_guide = FALSE) +
ggtitle('In-the-lab subjects') +
geom_hline(yintercept=level_zero_line, linetype="dashed", color = "red") +
guides(color=guide_legend(title="")) + theme(plot.title=element_text(size=fontSize), strip.text.x=element_text(size=fontSize), strip.text.y=element_text(size=fontSize),  axis.text.x=element_text(size=fontSize, angle = 45, hjust = 1), axis.text.y=element_text(size=fontSize), axis.title=element_text(size=fontSize)) +
scale_x_discrete(labels=c("0" = "OL-0", "1" = "OL-1", "2" = "OL-2", "3" = "OL-3"))
ggsave(paste('./plots/', names(var), '_lab.pdf', sep=''), scale = 1.6, height = 6, width = 4, unit = "cm")
filtered_by_level <- data_wild %>% filter(lvl == "0")
level_zero_line <- summary(filtered_by_level[[names(var)]])[['Median']]
bp <- ggplot(data_wild, aes(x=lvl, y=data_wild[[names(var)]])) + ylim(min_y_value, max_y_value) +
geom_violin(trim = FALSE, alpha = 0.5, position=position_dodge(0.9)) + theme_bw() + xlab("") + ylab('') +
geom_boxplot(alpha=1, color="black", width=.2, fill="white", outlier.size=0) +
stat_summary(fun.y=mean, colour="black", geom="point",
shape=5, size=1,show_guide = FALSE) +
ggtitle('In-the-wild subjects') +
geom_hline(yintercept=level_zero_line, linetype="dashed", color = "red") +
guides(color=guide_legend(title="")) + theme(plot.title=element_text(size=fontSize), strip.text.x=element_text(size=fontSize), strip.text.y=element_text(size=fontSize),  axis.text.x=element_text(size=fontSize, angle = 45, hjust = 1), axis.text.y=element_text(size=fontSize), axis.title=element_text(size=fontSize)) +
scale_x_discrete(labels=c("0" = "OL-0", "1" = "OL-1", "2" = "OL-2", "3" = "OL-3"))
ggsave(paste('./plots/', names(var), '_wild.pdf', sep=''), scale = 1.6, height = 6, width = 4, unit = "cm")
}
?kruskal_test
for (v in names(vars)) {
check_normality(data[[v]])
}
check_normality = function(data) {
plot(density(data))
qqPlot(data)
shapiro.test(data)
}
for (v in names(vars)) {
check_normality(data[[v]])
}
setwd(".")
library(plyr)
library(dplyr)
library(ggplot2)
library(gridExtra)
require(reshape2)
library(nortest)
library(effsize)
library(splitstackshape)
library(car)
library(rstatix)
library(tidyverse)
library(ggpubr)
library(ez)
library(bestNormalize)
library(effectsize)
options(max.print=50)
font_size = 10
check_normality = function(data) {
plot(density(data))
qqPlot(data)
shapiro.test(data)
}
for (v in names(vars)) {
check_normality(data[[v]])
}
check_normality = function(data) {
plot(density(data))
qqPlot(data)
print(shapiro.test(data))
}
for (v in names(vars)) {
check_normality(data[[v]])
}
check_normality = function(data) {
plot(density(data))
qqPlot(data)
print(shapiro.test(data))
}
for (v in names(vars)) {
print(v)
check_normality(data[[v]])
}
check_normality = function(data) {
plot(density(data))
qqPlot(data)
print(shapiro.test(data))
}
for (v in names(vars)) {
print(v)
check_normality(data[[v]])
}
?plot
check_normality = function(data, var_name) {
print(var_name)
plot(density(data), main=var_name)
qqPlot(data)
print(shapiro.test(data))
}
for (v in names(vars)) {
check_normality(data[[v]], v)
}
qqPlot
?qqPlot
check_normality = function(data, var_name) {
print(var_name)
plot(density(data), main=var_name)
qqPlot(data, main=var_name)
print(shapiro.test(data))
}
for (v in names(vars)) {
check_normality(data[[v]], v)
}
check_normality = function(data, var_name) {
print(var_name)
plot(density(data), main=var_name)
qqPlot(data, main=var_name)
print(shapiro.test(data))
}
for (v in names(vars)) {
check_normality(data[[v]], v)
}
print('IN THE LAB')
for (v in names(vars)) {
check_normality(data_lab[[v]], v)
}
print('IN THE WILD')
for (v in names(vars)) {
check_normality(data_wild[[v]], v)
}
fontSize = 9
for (i in seq(1,length(vars))) {
var <- vars[i]
# The maximum value of the scale on the Y axis is the maximum value of the metric, or 100 if the metric is a percentage
min_y_value <- min(data[[names(var)]])
max_y_value <- max(data[[names(var)]])
if(names(var) == 'cpu' || names(var) == 'gpu') {
max_y_value <- 100
}
bp <- ggplot(data, aes(x=subject_type, y=data[[names(var)]])) + ylim(min_y_value, max_y_value) +
geom_violin(trim = FALSE, alpha = 0.5, position=position_dodge(0.9), outlier.shape = NA) + theme_bw() + xlab("") + ylab(var) +
geom_boxplot(alpha=1, color="black", width=.2, fill="white", outlier.size=0, , outlier.shape = NA) +
stat_summary(fun.y=mean, colour="black", geom="point",
shape=5, size=1,show_guide = FALSE) +
ggtitle(var) +
guides(color=guide_legend(title="")) + theme(plot.title=element_text(size=fontSize), strip.text.x=element_text(size=fontSize), strip.text.y=element_text(size=fontSize),  axis.text.x=element_text(size=fontSize, angle = 45, hjust = 1), axis.text.y=element_text(size=fontSize), axis.title=element_text(size=fontSize)) +
scale_x_discrete(labels=c("lab" = "Lab", "wild" = "Wild"))
ggsave(paste('./plots/overview_wild_lab/', names(var), '.pdf', sep=''), scale = 1.6, height = 4, width = 3, unit = "cm")
}
for (i in seq(1,length(vars))) {
var <- vars[i]
# The maximum value of the scale on the Y axis is the maximum value of the metric, or 100 if the metric is a percentage
min_y_value <- min(data[[names(var)]])
max_y_value <- max(data[[names(var)]])
if(names(var) == 'cpu' || names(var) == 'gpu') {
max_y_value <- 100
}
bp <- ggplot(data, aes(x=subject_type, y=data[[names(var)]])) + ylim(min_y_value, max_y_value) +
geom_violin(trim = FALSE, alpha = 0.5, position=position_dodge(0.9), outlier.shape = NA) + theme_bw() + xlab("") + ylab(var) +
geom_boxplot(alpha=1, color="black", width=.2, fill="white", outlier.size=0, , outlier.shape = NA) +
stat_summary(fun.y=mean, colour="black", geom="point",
shape=5, size=1,show_guide = FALSE) +
ggtitle(var) +
coord_cartesian(ylim = quantile(data[[names(var)]], c(0.1, 0.9))) +
guides(color=guide_legend(title="")) + theme(plot.title=element_text(size=fontSize), strip.text.x=element_text(size=fontSize), strip.text.y=element_text(size=fontSize),  axis.text.x=element_text(size=fontSize, angle = 45, hjust = 1), axis.text.y=element_text(size=fontSize), axis.title=element_text(size=fontSize)) +
scale_x_discrete(labels=c("lab" = "Lab", "wild" = "Wild"))
ggsave(paste('./plots/overview_wild_lab/', names(var), '.pdf', sep=''), scale = 1.6, height = 4, width = 3, unit = "cm")
}
for (i in seq(1,length(vars))) {
var <- vars[i]
# The maximum value of the scale on the Y axis is the maximum value of the metric, or 100 if the metric is a percentage
min_y_value <- min(data[[names(var)]])
max_y_value <- max(data[[names(var)]])
if(names(var) == 'cpu' || names(var) == 'gpu') {
max_y_value <- 100
}
bp <- ggplot(data, aes(x=subject_type, y=data[[names(var)]])) + ylim(min_y_value, max_y_value) +
geom_violin(trim = FALSE, alpha = 0.5, position=position_dodge(0.9)) + theme_bw() + xlab("") + ylab(var) +
geom_boxplot(alpha=1, color="black", width=.2, fill="white", outlier.size=0) +
stat_summary(fun.y=mean, colour="black", geom="point",
shape=5, size=1,show_guide = FALSE) +
ggtitle(var) +
guides(color=guide_legend(title="")) + theme(plot.title=element_text(size=fontSize), strip.text.x=element_text(size=fontSize), strip.text.y=element_text(size=fontSize),  axis.text.x=element_text(size=fontSize, angle = 45, hjust = 1), axis.text.y=element_text(size=fontSize), axis.title=element_text(size=fontSize)) +
scale_x_discrete(labels=c("lab" = "Lab", "wild" = "Wild"))
ggsave(paste('./plots/overview_wild_lab/', names(var), '.pdf', sep=''), scale = 1.6, height = 4, width = 3, unit = "cm")
}
for (i in seq(1,length(vars))) {
var <- vars[i]
# The maximum value of the scale on the Y axis is the maximum value of the metric, or 100 if the metric is a percentage
min_y_value <- min(data[[names(var)]])
max_y_value <- max(data[[names(var)]])
if(names(var) == 'cpu' || names(var) == 'gpu') {
max_y_value <- 100
}
bp <- ggplot(data, aes(x=subject_type, y=data[[names(var)]])) + ylim(min_y_value, max_y_value) +
geom_violin(trim = FALSE, alpha = 0.5, position=position_dodge(0.9)) + theme_bw() + xlab("") + ylab(var) +
geom_boxplot(alpha=1, color="black", width=.2, fill="white", outlier.size=0) +
stat_summary(fun.y=mean, colour="black", geom="point",
shape=5, size=1,show_guide = FALSE) +
ggtitle(var) +
guides(color=guide_legend(title="")) + theme(plot.title=element_text(size=fontSize), strip.text.x=element_text(size=fontSize), strip.text.y=element_text(size=fontSize),  axis.text.x=element_text(size=fontSize, angle = 45, hjust = 1), axis.text.y=element_text(size=fontSize), axis.title=element_text(size=fontSize)) +
scale_x_discrete(labels=c("lab" = "Lab", "wild" = "Wild"))
ggsave(paste('./plots/overview_wild_lab/', names(var), '.pdf', sep=''), scale = 1.6, height = 4, width = 3, unit = "cm")
}
check_normality = function(data, var_name) {
print(var_name)
plot(density(data), main=var_name)
qqPlot(data, main=var_name)
print(shapiro.test(data))
}
print('Normality checks for the IN-THE-LAB data')
for (v in names(vars)) {
check_normality(data_lab[[v]], v)
}
print('Normality checks for the IN-THE-WILD data')
for (v in names(vars)) {
check_normality(data_wild[[v]], v)
}
